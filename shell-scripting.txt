#!/bin/bash

set -x

# Store the AWS account ID in a variable
aws_account_id=$(aws sts get-caller-identity --query 'Account' --output text)

# Print the AWS account ID from the variable
echo "AWS Account ID: $aws_account_id"

# Set AWS region and bucket name
aws_region="us-east-1"
bucket_name="abhishek-ultimate-bucket"
lambda_func_name="s3-lambda-function"
role_name="s3-lambda-sns"
email_address="abhishekab5297@gmail.com"

# Check if the IAM role already exists, if not, create it
if ! aws iam get-role --role-name "$role_name" >/dev/null 2>&1; then
  aws iam create-role --role-name "$role_name" --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [{
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "lambda.amazonaws.com",
          "s3.amazonaws.com",
          "sns.amazonaws.com"
        ]
      }
    }]
  }'
fi

# Extract the role ARN from the JSON response and store it in a variable
role_arn=$(aws iam get-role --role-name "$role_name" --query 'Role.Arn' --output text)

# Print the role ARN
echo "Role ARN: $role_arn"

# Attach Permissions to the Role
aws iam attach-role-policy --role-name "$role_name" --policy-arn arn:aws:iam::aws:policy/AWSLambda_FullAccess
aws iam attach-role-policy --role-name "$role_name" --policy-arn arn:aws:iam::aws:policy/AmazonSNSFullAccess

# Check if the S3 bucket already exists, if not, create it
if ! aws s3api head-bucket --bucket "$bucket_name" >/dev/null 2>&1; then
  aws s3api create-bucket --bucket "$bucket_name" --region "$aws_region"
fi

# Print a message indicating the bucket already exists
echo "Bucket '$bucket_name' already exists."

# Create a Lambda function ZIP file
zip -r s3-lambda-function.zip ./s3-lambda-function

# Create or update the Lambda function
aws lambda create-function \
  --region "$aws_region" \
  --function-name "$lambda_func_name" \
  --runtime "python3.8" \
  --handler "s3-lambda-function/s3-lambda-function.lambda_handler" \
  --memory-size 128 \
  --timeout 30 \
  --role "$role_arn" \
  --zip-file "fileb://./s3-lambda-function.zip"

# Add Permissions to S3 Bucket to invoke Lambda
aws lambda add-permission \
  --function-name "$lambda_func_name" \
  --statement-id "s3-lambda-sns" \
  --action "lambda:InvokeFunction" \
  --principal s3.amazonaws.com \
  --source-arn "arn:aws:s3:::$bucket_name"

# Create an S3 event trigger for the Lambda function
LambdaFunctionArn="arn:aws:lambda:$aws_region:$aws_account_id:function:$lambda_func_name"
aws s3api put-bucket-notification-configuration \
  --region "$aws_region" \
  --bucket "$bucket_name" \
  --notification-configuration '{
    "LambdaFunctionConfigurations": [{
        "LambdaFunctionArn": "'"$LambdaFunctionArn"'",
        "Events": ["s3:ObjectCreated:*"]
    }]
}'

# Create an SNS topic if it doesn't exist and get the topic ARN
topic_arn=$(aws sns create-topic --name "$role_name" --output json | jq -r '.TopicArn')

# Print the TopicArn
echo "SNS Topic ARN: $topic_arn"

# Trigger SNS Topic using Lambda Function
linkedin_link='<a href="https://www.linkedin.com/in/abhishek-bhosale-2207861a9">LinkedIn Profile</a>'
aws sns publish \
  --topic-arn "$topic_arn" \
  --subject 'A new object created in S3 bucket' \
  --message "Hello from Abhishek Bhosale to all! You can find my $linkedin_link."
